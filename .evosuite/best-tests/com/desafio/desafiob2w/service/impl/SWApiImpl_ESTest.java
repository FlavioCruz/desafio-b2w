/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 17 00:32:58 GMT 2019
 */

package com.desafio.desafiob2w.service.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.desafio.desafiob2w.model.Planet;
import com.desafio.desafiob2w.repository.IPlanetDataAccess;
import com.desafio.desafiob2w.service.impl.SWApiImpl;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SWApiImpl_ESTest extends SWApiImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://swapi.co/api/planets/1");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      assertTrue(boolean0);
      
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Planet planet0 = sWApiImpl0.getById(integer0);
      assertNull(planet0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://swapi.co/api/planets/");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      assertTrue(boolean0);
      
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      List<Planet> list0 = sWApiImpl0.getAll();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://swapi.co/api/planets/31");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "(YZ2+`*6$GN#7Ah[1");
      assertTrue(boolean0);
      
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      Integer integer0 = new Integer(31);
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        sWApiImpl0.getById(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not extract response: no suitable HttpMessageConverter found for response type [class com.desafio.desafiob2w.model.Planet] and content type [application/octet-stream]
         //
         verifyException("org.springframework.web.client.HttpMessageConverterExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      // Undeclared exception!
      try { 
        sWApiImpl0.getById((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.desafio.desafiob2w.service.impl.SWApiImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://swapi.co/api/planets/");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "https://swapi.co/api/planets/");
      assertTrue(boolean0);
      
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      // Undeclared exception!
      try { 
        sWApiImpl0.getAll();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not extract response: no suitable HttpMessageConverter found for response type [interface java.util.List] and content type [application/octet-stream]
         //
         verifyException("org.springframework.web.client.HttpMessageConverterExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      assertNotNull(sWApiImpl0);
      
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      Integer integer0 = new Integer(31);
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        sWApiImpl0.getById(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 404 Not Found
         //
         verifyException("org.springframework.web.client.HttpClientErrorException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SWApiImpl sWApiImpl0 = new SWApiImpl();
      IPlanetDataAccess iPlanetDataAccess0 = mock(IPlanetDataAccess.class, new ViolatedAssumptionAnswer());
      Injector.inject(sWApiImpl0, (Class<?>) SWApiImpl.class, "dataAccess", (Object) iPlanetDataAccess0);
      Injector.validateBean(sWApiImpl0, (Class<?>) SWApiImpl.class);
      // Undeclared exception!
      try { 
        sWApiImpl0.getAll();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 404 Not Found
         //
         verifyException("org.springframework.web.client.HttpClientErrorException", e);
      }
  }
}
