/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 17 00:29:30 GMT 2019
 */

package com.desafio.desafiob2w.resource;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.desafio.desafiob2w.model.Planet;
import com.desafio.desafiob2w.resource.PlanetResource;
import com.desafio.desafiob2w.resource.response.Response;
import com.desafio.desafiob2w.resource.response.Status;
import com.desafio.desafiob2w.service.PlanetService;
import com.desafio.desafiob2w.service.SWApi;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlanetResource_ESTest extends PlanetResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Response response0 = planetResource0.create((List<Planet>) null);
      assertEquals("An error occurred", response0.getMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      Planet planet0 = new Planet();
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      LinkedList<Planet> linkedList0 = new LinkedList<Planet>();
      linkedList0.add(planet0);
      Response response0 = planetResource0.create((List<Planet>) linkedList0);
      assertEquals(Status.SUCCESS, response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      Vector<Planet> vector0 = new Vector<Planet>();
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(planetService0).getAll();
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Response response0 = planetResource0.getAll();
      assertEquals(Status.SUCCESS, response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      Planet planet0 = new Planet();
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      doReturn(planet0).when(planetService0).getByName(anyString());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Response response0 = planetResource0.getByName((String) null);
      assertEquals(Status.SUCCESS, response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Response response0 = planetResource0.create((Planet) null);
      assertEquals("An error occurred", response0.getMessage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Integer integer0 = new Integer(0);
      Response response0 = planetResource0.delete(integer0);
      assertEquals("Sucess", response0.getMessage());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PlanetResource planetResource0 = new PlanetResource();
      SWApi sWApi0 = mock(SWApi.class, new ViolatedAssumptionAnswer());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "api", (Object) sWApi0);
      Planet planet0 = new Planet();
      PlanetService planetService0 = mock(PlanetService.class, new ViolatedAssumptionAnswer());
      doReturn(planet0).when(planetService0).getById(anyInt());
      Injector.inject(planetResource0, (Class<?>) PlanetResource.class, "planetService", (Object) planetService0);
      Injector.validateBean(planetResource0, (Class<?>) PlanetResource.class);
      Integer integer0 = new Integer(0);
      Response response0 = planetResource0.getById(integer0);
      assertEquals(Status.SUCCESS, response0.getStatus());
  }
}
